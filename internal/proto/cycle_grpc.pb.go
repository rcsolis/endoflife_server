// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: internal/proto/cycle.proto

package endoflife_server

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CycleService_GetAllLanguages_FullMethodName = "/proto.CycleService/GetAllLanguages"
	CycleService_GetAllVersions_FullMethodName  = "/proto.CycleService/GetAllVersions"
	CycleService_GetDetails_FullMethodName      = "/proto.CycleService/GetDetails"
)

// CycleServiceClient is the client API for CycleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service
type CycleServiceClient interface {
	GetAllLanguages(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AllLanguagesResponse, error)
	GetAllVersions(ctx context.Context, in *Language, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Cycle], error)
	GetDetails(ctx context.Context, in *DetailsRequest, opts ...grpc.CallOption) (*Cycle, error)
}

type cycleServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCycleServiceClient(cc grpc.ClientConnInterface) CycleServiceClient {
	return &cycleServiceClient{cc}
}

func (c *cycleServiceClient) GetAllLanguages(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*AllLanguagesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AllLanguagesResponse)
	err := c.cc.Invoke(ctx, CycleService_GetAllLanguages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cycleServiceClient) GetAllVersions(ctx context.Context, in *Language, opts ...grpc.CallOption) (grpc.ServerStreamingClient[Cycle], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &CycleService_ServiceDesc.Streams[0], CycleService_GetAllVersions_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Language, Cycle]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CycleService_GetAllVersionsClient = grpc.ServerStreamingClient[Cycle]

func (c *cycleServiceClient) GetDetails(ctx context.Context, in *DetailsRequest, opts ...grpc.CallOption) (*Cycle, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Cycle)
	err := c.cc.Invoke(ctx, CycleService_GetDetails_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CycleServiceServer is the server API for CycleService service.
// All implementations should embed UnimplementedCycleServiceServer
// for forward compatibility.
//
// Service
type CycleServiceServer interface {
	GetAllLanguages(context.Context, *Empty) (*AllLanguagesResponse, error)
	GetAllVersions(*Language, grpc.ServerStreamingServer[Cycle]) error
	GetDetails(context.Context, *DetailsRequest) (*Cycle, error)
}

// UnimplementedCycleServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCycleServiceServer struct{}

func (UnimplementedCycleServiceServer) GetAllLanguages(context.Context, *Empty) (*AllLanguagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllLanguages not implemented")
}
func (UnimplementedCycleServiceServer) GetAllVersions(*Language, grpc.ServerStreamingServer[Cycle]) error {
	return status.Errorf(codes.Unimplemented, "method GetAllVersions not implemented")
}
func (UnimplementedCycleServiceServer) GetDetails(context.Context, *DetailsRequest) (*Cycle, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDetails not implemented")
}
func (UnimplementedCycleServiceServer) testEmbeddedByValue() {}

// UnsafeCycleServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CycleServiceServer will
// result in compilation errors.
type UnsafeCycleServiceServer interface {
	mustEmbedUnimplementedCycleServiceServer()
}

func RegisterCycleServiceServer(s grpc.ServiceRegistrar, srv CycleServiceServer) {
	// If the following call pancis, it indicates UnimplementedCycleServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CycleService_ServiceDesc, srv)
}

func _CycleService_GetAllLanguages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CycleServiceServer).GetAllLanguages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CycleService_GetAllLanguages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CycleServiceServer).GetAllLanguages(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CycleService_GetAllVersions_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Language)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CycleServiceServer).GetAllVersions(m, &grpc.GenericServerStream[Language, Cycle]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CycleService_GetAllVersionsServer = grpc.ServerStreamingServer[Cycle]

func _CycleService_GetDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CycleServiceServer).GetDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CycleService_GetDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CycleServiceServer).GetDetails(ctx, req.(*DetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CycleService_ServiceDesc is the grpc.ServiceDesc for CycleService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CycleService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.CycleService",
	HandlerType: (*CycleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllLanguages",
			Handler:    _CycleService_GetAllLanguages_Handler,
		},
		{
			MethodName: "GetDetails",
			Handler:    _CycleService_GetDetails_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAllVersions",
			Handler:       _CycleService_GetAllVersions_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "internal/proto/cycle.proto",
}
